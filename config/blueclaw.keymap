/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "secrets.dtsi"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt { tapping-term-ms = <200>; };

&gresc { keep-mods = <(MOD_LSFT|MOD_RSFT)>; };

/ {
    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hml: homerow-left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <50 51 52 53 54 55 43 44 30 18 6 31 19 7 8 9 10 11 35 22 23 49 48 34 47 57 56 45 46 32 33 21 20>;
            hold-trigger-on-release;
        };

        hmr: homerow-right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57>;
            hold-trigger-on-release;
        };

        tldesc: tilde_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "TLDESC";
            bindings = <&kp ESC>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbr: lbr {
            compatible = "zmk,behavior-mod-morph";
            label = "LBR";
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        rbr: rbr {
            compatible = "zmk,behavior-mod-morph";
            label = "RBR";
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CO_CFG {
            bindings = <&mo 6>;
            key-positions = <56 57>;
            timeout-ms = <100>;
            slow-release;
        };

        CO_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <31 32>;
        };
    };

    macros {
        m_pass1: m_pass1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(N) &kp LS(O) &kp LS(N) &kp LS(E)>;
            label = "M_PASS1";
            wait-ms = <10>;
            tap-ms = <15>;
        };

        m_pass2: m_pass2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(N) &kp LS(O) &kp LS(N) &kp LS(E)>;
            label = "M_PASS2";
        };

        m_zoom: m_zoom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp FSLH &kp Z &kp O &kp O &kp M &kp SPACE &kp J &kp O &kp I &kp N &kp SPACE &kp M &kp E>;
            label = "M_ZOOM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&gresc     &kp N1        &kp N2           &kp N3           &kp N4                &kp N5                                        &kp N6       &kp N7              &kp N8            &kp N9           &kp N0                        &kp MINUS
&kp TAB    &kp Q         &kp W            &kp F            &kp P                 &kp B                                         &kp J        &kp L               &kp U             &kp Y            &kp SEMICOLON                 &kp BACKSLASH
&kp ESC    &hml LCTRL A  &hml LEFT_ALT R  &hml LEFT_GUI S  &hml LEFT_SHIFT T     &kp G                                         &kp M        &hmr RIGHT_SHIFT N  &hmr RIGHT_GUI E  &hmr LEFT_ALT I  &hmr RIGHT_CONTROL O          &kp SQT
&kp LSHFT  &lt 4 Z       &kp X            &kp C            &kp D                 &kp V                                         &kp K        &kp H               &kp COMMA         &kp DOT          &mt LA(LC(LEFT_SHIFT)) SLASH  &kp RSHFT
                         &none            &kp LEFT_ALT                                                                                                          &lbr              &rbr
                                                           &mt LEFT_COMMAND TAB  &lt 2 ENTER  &none    &key_repeat             &lt 1 SPACE  &lt 3 BACKSPACE
                                                                                 &none        &mo 4    &kp LA(LC(LEFT_SHIFT))  &none
            >;
        };

        Symbols {
            bindings = <
&trans  &trans              &trans               &trans             &trans                            &trans                              &trans             &trans                             &trans               &trans                  &trans                   &trans
&trans  &kp N1              &kp N2               &kp N3             &kp N4                            &kp N5                              &kp N6             &kp N7                             &kp N8               &kp N9                  &kp N0                   &trans
&trans  &hml LCTRL AT_SIGN  &hml LEFT_ALT TILDE  &hml LEFT_GUI SQT  &hml LEFT_SHIFT LEFT_PARENTHESIS  &kp LEFT_BRACE                      &kp RIGHT_BRACE    &hmr LEFT_SHIFT RIGHT_PARENTHESIS  &hmr LEFT_GUI EQUAL  &hmr LEFT_ALT ASTERISK  &hmr LEFT_SHIFT KP_PLUS  &trans
&trans  &trans              &kp GRAVE            &kp MINUS          &kp BACKSLASH                     &kp LEFT_BRACKET                    &kp RIGHT_BRACKET  &kp EXCLAMATION                    &trans               &trans                  &trans                   &trans
                            &trans               &trans                                                                                                                                         &trans               &trans
                                                                    &trans                            &trans            &trans    &trans  &trans             &lt 6 BACKSPACE
                                                                                                      &trans            &trans    &trans  &trans
            >;

            label = "sym/num";
        };

        Nav {
            bindings = <
&trans  &trans             &trans                &trans                &trans                        &trans                             &trans     &trans           &trans  &trans     &trans             &trans
&trans  &trans             &trans                &trans                &trans                        &kp K_MUTE                         &kp PG_UP  &kp HOME         &kp UP  &kp END    &trans             &trans
&trans  &hml LCTRL C_PREV  &hml LEFT_ALT C_NEXT  &hml LEFT_GUI C_STOP  &hml LEFT_SHIFT C_PLAY_PAUSE  &kp C_VOLUME_UP                    &kp PG_DN  &kp LEFT         &kp DOWN  &kp RIGHT  &kp K_APPLICATION  &kp ENTER
&trans  &trans             &trans                &kp K_COPY            &kp K_PASTE                   &kp C_VOL_DN                       &trans     &trans           &trans  &trans     &trans             &trans
                           &trans                &trans                                                                                                             &trans  &trans
                                                                       &trans                        &trans           &trans    &trans  &trans     &lt 6 BACKSPACE
                                                                                                     &trans           &trans    &trans  &trans
            >;

            label = "Nav";
        };

        sys {
            bindings = <
&bootloader   &kp LG(LC(N1))  &kp LG(LC(N2))  &kp LG(LC(N3))  &kp LG(LC(N4))  &kp LG(LC(N5))                    &kp LG(LC(N6))  &kp LG(LC(N7))  &kp LG(LC(N8))  &kp LG(LC(N9))  &kp LG(LC(N0))  &bootloader
&trans        &m_pass1        &m_pass2        &trans          &trans          &trans                            &trans          &kp K_LOCK      &trans          &trans          &trans          &trans
&kp CAPSLOCK  &caps_word      &trans          &trans          &trans          &to 5                             &trans          &trans          &trans          &trans          &trans          &trans
&trans        &m_zoom         &trans          &trans          &trans          &to 0                             &trans          &trans          &trans          &trans          &trans          &trans
                              &trans          &trans                                                                                            &trans          &trans
                                                              &trans          &trans          &trans    &trans  &trans          &trans
                                                                              &trans          &trans    &trans  &trans
            >;

            label = "sys";
        };

        func {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5                     &kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans
&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15                    &kp F16  &kp F17  &kp F18  &kp F19  &kp F20  &trans
&trans  &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans
&trans  &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans
                 &trans   &trans                                                         &trans   &trans
                                   &trans   &trans   &trans    &trans  &trans   &trans
                                            &trans   &trans    &trans  &trans
            >;
        };

        game {
            bindings = <
&kp ESC    &kp N1  &kp N2    &kp N3    &kp N4  &kp N5                                 &kp N6     &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W     &kp E     &kp R   &kp T                                  &kp Y      &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp LCTRL  &kp A   &kp S     &kp D     &kp F   &kp G                                  &kp H      &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X     &kp C     &kp V   &kp B                                  &kp N      &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
                   &kp LALT  &kp LGUI                                                                    &kp RGUI   &kp LALT
                                       &trans  &kp ENTER  &kp SPACE      &kp ENTER    &kp SPACE  &trans
                                               &trans     &key_repeat    &key_repeat  &trans
            >;

            label = "game";
        };

        cfg {
            bindings = <
&trans  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                     &to 0   &to 5   &trans        &trans        &trans  &trans
&trans  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4                    &trans  &trans  &out OUT_USB  &out OUT_TOG  &trans  &trans
&trans  &trans         &trans         &trans         &trans         &trans                           &trans  &trans  &trans        &trans        &trans  &trans
&trans  &trans         &bt BT_CLR     &trans         &trans         &trans                           &trans  &trans  &trans        &trans        &trans  &trans
                       &trans         &trans                                                                         &trans        &trans
                                                     &trans         &trans         &trans    &trans  &trans  &trans
                                                                    &trans         &trans    &trans  &trans
            >;

            label = "cfg";
        };
    };
};

// THIS WILL Be a defined makro when compiled with secrets, or empty when no secrets are in play

INJECT_SECRETS()
